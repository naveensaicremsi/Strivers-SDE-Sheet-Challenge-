Node<int>* sortTwoLists(Node<int>* first, Node<int>* second)
{
    Node<int>*head1=first;
    Node<int>*head2=second;
    Node<int>* dummy = new Node<int>(0);
    Node<int>* start = dummy;
    while(head1!=NULL&&head2!=NULL)
    {
        if(head1->data<=head2->data)
        {
            Node<int>*temp=new Node<int>(head1->data);
            start->next=temp;
            start=start->next;
            head1=head1->next;
        }
        else
        {
            Node<int>*temp=new Node<int>(head2->data);
            start->next=temp;
            start=start->next;
            head2=head2->next;
        }
    }
    while(head1!=NULL)
    {
        Node<int>*temp=new Node<int>(head1->data);
        start->next=temp;
        start=start->next;
        head1=head1->next;
    }
    while(head2!=NULL)
    {
        Node<int>*temp=new Node<int>(head2->data);
        start->next=temp;
        start=start->next;
        head2=head2->next;
    }
    return dummy->next;
}

TC-O(n+m)
SC-O(n+m)



#include <bits/stdc++.h>

/************************************************************

    Following is the linked list node structure.
    
    template <typename T>
    class Node {
        public:
        T data;
        Node* next;

        Node(T data) {
            next = NULL;
            this->data = data;
        }

        ~Node() {
            if (next != NULL) {
                delete next;
            }
        }
    };

************************************************************/

Node<int>* sortTwoLists(Node<int>* first, Node<int>* second)
{
    Node<int>*l1=first;
    Node<int>*l2=second;
    if(l1==NULL)
    {
        return l2;
    }
    if(l2==NULL)
    {
        return l1;
    }
    if(l2->data<l1->data)
    {
        return sortTwoLists(l2,l1);
    }
    Node<int>*res=l1;
    Node<int>*temp=NULL;
    while(l1!=NULL&&l2!=NULL)
    {
        if(l1->data<=l2->data)
        {
            temp=l1;
            l1=l1->next;
        }
        else
        {
            temp->next=l2;
            swap(l1,l2);
        }
    }
    if(l1!=NULL)
    {
        temp->next=l1;
    }
    if(l2!=NULL)
    {
        temp->next=l2;
    }
    return res;
}


TC-O(n+m)
SC-O(1)