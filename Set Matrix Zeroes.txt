Brute Force

#include <bits/stdc++.h>
void changeRow(int row,vector<vector<int>>&matrix,int m)
{
	for(int i=0;i<m;i++)
	{
		if(matrix[row][i]!=0)
		{
			matrix[row][i]=1e9;
		}
	}
}
void changeCol(int col,vector<vector<int>>&matrix,int n)
{
	for(int i=0;i<n;i++)
	{
		if(matrix[i][col]!=0)
		{
			matrix[i][col]=1e9;
		}
	}
}
void setZeros(vector<vector<int>> &matrix)
{
	int n=matrix.size(); 
	int m=matrix[0].size(); 
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			if(matrix[i][j]==0)
			{
				changeRow(i,matrix,m);
				changeCol(j,matrix,n);
			}
		}
	}
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			if(matrix[i][j]==1e9)
			{
				matrix[i][j]=0;
			}
		}
	}
}

TC-O(n*m)*O(n+m)+O(n*m)
SC-O(1)

Better Approach

#include <bits/stdc++.h>

void setZeros(vector<vector<int>> &matrix)
{
	int n=matrix.size();
	int m=matrix[0].size();
	vector<int>rows(n,0);
	vector<int>cols(m,0);
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			if(matrix[i][j]==0)
			{
				rows[i]=1;
				cols[j]=1;
			}
		}
	}
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			if(rows[i]||cols[j])
			{
				matrix[i][j]=0;
			}
		}
	}
}

TC-O(n*m)+O(n*m)
SC-O(n+m)

Most Optimal Approach

#include <bits/stdc++.h>

void setZeros(vector<vector<int>> &matrix)
{
	int n=matrix.size();
	int m=matrix[0].size();
	int col0=0;
	for(int i=0;i<n;i++)
	{
	for(int j=0;j<m;j++)
	{
	 if(matrix[i][j]==0)
	 {
		 matrix[i][0]=0;
		 if(j==0)
		 {
			 col0=1;
		 }
		 else
		 {
			 matrix[0][j]=0;
		 }
	 }		
	}
	}
	for(int i=n-1;i>=0;i--)
	{
		for(int j=m-1;j>0;j--)
		{
			if(matrix[i][0]==0||matrix[0][j]==0)
			{
				matrix[i][j]=0;
			}
		}
		if(col0)
		{
			matrix[i][0]=0;
		}
	}
}

TC-O(n*m)+O(n*m)
SC-O(1)

