#include<bits/stdc++.h>
int f(int i,int prev,int arr[],int n,vector<vector<int>>&dp)
{
    if(i==n)
    {
        return 0;
    }
    if(dp[i][prev+1]!=-1)
    {
        return dp[i][prev+1];
    }
    int l=0;
    if(prev==-1||arr[i]>arr[prev])
    {
        l=1+f(i+1,i,arr,n,dp);
    }
    l=max(l,f(i+1,prev,arr,n,dp));
    return dp[i][prev+1]=l;
}
int longestIncreasingSubsequence(int arr[], int n)
{
    vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
    return f(0,-1,arr,n,dp);
}
