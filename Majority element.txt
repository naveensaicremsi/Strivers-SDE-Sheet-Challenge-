#include <bits/stdc++.h>

int findMajorityElement(int arr[], int n) {
	for(int i=0;i<n;i++)
	{
		int c=1;
		for(int j=i+1;j<n;j++)
		{
			if(arr[i]==arr[j])
			{
				c++;
			}
		}
		if(c>n/2)
		{
			return arr[i];
		}
	}
	return -1;
}

TC-O(n*n)
SC-O(1)

#include <bits/stdc++.h>

int findMajorityElement(int arr[], int n) {
	unordered_map<int,int>mpp;
	for(int i=0;i<n;i++)
	{
		mpp[arr[i]]+=1;
		if(mpp[arr[i]]>n/2)
		{
			return arr[i];
		}
	}
	return -1;
}

TC-O(n)
SC-O(n)

#include <bits/stdc++.h>

int findMajorityElement(int arr[], int n) {
	int c=0;
	int el;
	for(int i=0;i<n;i++)
	{
		if(c==0)
		{
			el=arr[i];
			c=1;
		}
		else if(arr[i]==el)
		{
			c+=1;
		}
		else
		{
			c-=1;
		}
	}
	c=0;
	for(int i=0;i<n;i++)
	{
		if(el==arr[i])
		{
			c+=1;
		}
	}
	if(c>n/2)
	{
		return el;
	}
	return -1;
}

TC-O(n)
SC-O(1)