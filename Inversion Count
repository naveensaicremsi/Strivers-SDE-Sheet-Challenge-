#include <bits/stdc++.h> 
long long getInversions(long long *arr, int n){
    long long c=0;
    for(int i=0;i<n;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            if(arr[i]>arr[j])
            {
                c++;
            }
        }
    }
    return c;
}
TC-O(n*n)
SC-O(1)

#include <bits/stdc++.h> 
long long merge(long long *arr,int low,int mid,int high)
{
    long long c=0;
    int left=low;
    int right=mid+1;
    vector<long long>temp;
    while(left<=mid&&right<=high)
    {
        if(arr[left]<=arr[right])
        {
            temp.push_back(arr[left]);
            left++;
        }
        else
        {
            temp.push_back(arr[right]);
            c+=mid+1-left;
            right++;
        }
    }
    while (left <= mid) 
    {
        temp.push_back(arr[left]);
        left++;
    }

    while (right <= high)
     {
        temp.push_back(arr[right]);
        right++;
    }
    for(int i=low;i<=high;i++)
    {
        arr[i]=temp[i-low];
    }
    return c;
}

long long mergesort(long long *arr,int low,int high)
{
    long long c=0;
    if (low <= high) {
      int mid = (low + high) >> 1;
      c += mergesort(arr, low, mid);
      c += mergesort(arr, mid + 1, high);
      c += merge(arr, low, mid, high);
    }
    return c;
}
long long getInversions(long long *arr, int n){
    int low=0;
    int high=n-1;
    return mergesort(arr,low,high);
}

TC-O(nlog(n))
SC-O(n)
